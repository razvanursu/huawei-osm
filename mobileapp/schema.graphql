# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input CreateEventInput {
  address: String!
  description: String
  endTime: DateTime!
  hashtag: String!
  isPrivate: Boolean = true
  name: String!
  paypalUsername: String
  startTime: DateTime!
}

input CreateTicketTemplateInput {
  description: String
  eventId: ID!
  name: String!
  price: Float!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Event {
  address: String!
  description: String
  endTime: DateTime!
  hashtag: String!
  id: ID!
  isAdmin: Boolean!
  isPrivate: Boolean!
  name: String!
  organizer: Profile!
  organizerId: String!
  participants(filters: EventParticipantFilter): [EventParticipant!]!
  participation: EventParticipant
  paypalUsername: String
  poster: String
  startTime: DateTime!
  ticketTemplates: [TicketTemplate!]!
}

type EventParticipant {
  event: Event!
  eventId: ID!
  isAdmin: Boolean!
  isInvitationPending: Boolean!
  participant: Profile!
  participantId: ID!
  title: String
}

input EventParticipantFilter {
  isInvitationPending: Boolean
}

input EventParticipantIdInput {
  eventId: ID!
  participantId: ID!
}

input EventParticipantInput {
  eventId: ID!
  isAdmin: Boolean = false
  participantId: ID!
  title: String
}

type EventStory {
  author: Profile!
  authorId: ID!
  event: Event!
  eventId: ID!
  url: String!
}

input FollowUserInput {
  followingId: String!
}

input FollowerPaginationCursor {
  followerId: String!
  followingId: String!
}

type FollowerRelation {
  follower: Profile!
  followingUser: Profile!
}

type LoginError {
  message: String!
}

input LoginInput {
  email: String!
  password: String!
}

union LoginResult = LoginError | Token

type Mutation {
  createEvent(input: CreateEventInput!): Event
  createEventParticipant(input: EventParticipantInput!): EventParticipant
  createEventStory(eventId: String!, file: Upload): EventStory
  createTicketTemplate(input: CreateTicketTemplateInput!): TicketTemplate
  deleteEvent(eventId: String!): Boolean
  deleteTicketTemplate(eventId: String!, id: String!): Boolean
  followUser(input: FollowUserInput!): FollowerRelation
  login(input: LoginInput!): LoginResult!
  removeEventParticipant(id: EventParticipantIdInput!): Boolean
  signup(input: SignupInput!): SignupResult!
  singleUpload(file: Upload!, test: String!): Boolean!
  unfollowUser(input: FollowUserInput!): String
  updateEvent(eventId: String!, file: Upload, input: UpdateEventInput): Event
  updateEventParticipant(input: EventParticipantInput!): EventParticipant
  updateProfile(file: Upload, input: ProfileUpdateInput!): Profile
  updateTicketTemplate(id: String!, input: UpdateTicketTemplateInput!): TicketTemplate
}

type Profile {
  bio: String
  followers(cursor: FollowerPaginationCursor, take: Float): [Profile!]!
  followersNumber: Int!
  followingRelation: Boolean!
  followingUsers(cursor: FollowerPaginationCursor, take: Float): [Profile!]!
  followingUsersNumber: Int!
  id: ID!
  name: String!
  profilePicture: String
  username: String!
}

input ProfileUpdateInput {
  bio: String
  name: String
  username: String
}

type Query {
  event(eventId: String!): Event
  eventStories(eventId: String!): [EventStory!]
  events: [Event!]
  myAccount: User
  myProfile: Profile
  profile(userId: String!): Profile
  profiles: [Profile!]
  userStories(userId: String!): [EventStory!]
}

type SignupError {
  message: String!
  target: String!
}

input SignupInput {
  birthday: DateTime!
  email: String!
  name: String!
  password: String!
  username: String!
}

union SignupResult = SignupError | User

type TicketTemplate {
  description: String
  event: Event!
  eventId: ID!
  id: ID!
  name: String!
  price: Float!
}

type Token {
  token: String!
}

input UpdateEventInput {
  description: String
  endTime: DateTime
  isPrivate: Boolean
  name: String
  paypalUsername: String
  startTime: DateTime
}

input UpdateTicketTemplateInput {
  description: String
  name: String!
  price: Float!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  email: String!
  id: ID!
  name: String!
}
